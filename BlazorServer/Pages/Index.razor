@page "/"
@using Microsoft.AspNetCore.SignalR.Client

@*inject dependancy - to get the Current servet URL*@
@inject NavigationManager NavManager 

@* to disconnect from the hub*@
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

@*disable button if not connected to Hub*@
@*Send user and message to hub*@
<button @onclick="Send" disabled="@(IsConnected ==  false)">Send</button>

<hr />

<ul>
    @foreach (var message in messages)
    {
     <li>@message</li>   
    }
</ul>

@code{
    private HubConnection? hubConnection; //to connect the Hub
    private List<string> messages = new(); //to get the chat messages
    private string? userInput;
    private string? messageInput;

    //connect to Hub on start
    protected override async Task OnInitializedAsync()
    {
        //Setup the connection to the hub
        hubConnection = new HubConnectionBuilder() //to create connection with hub
        .WithUrl(NavManager.ToAbsoluteUri("/chathub")) //hub URL
        .WithAutomaticReconnect() // for auto reconnecting on problem in connection
        .Build(); //to build the connection


        //Client -  Reciver of the message
        //chat hub send message method parameter and message type
        //catch data recieved from Hub/server
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged); //to raise an event to know the message has been recived
                                          // something has changed in the page 
        });


        await hubConnection.StartAsync(); // start the connection with Hub/server
    }

    //To send the message to the hub
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput); //To send message/broadcast the message
                                                                                   //SendMessage - method in Hub to which handles the messages
        }
    }

    //to check hub connection status
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected; //To check connection status


    //To dispose the hub connection
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync(); //to dispose connection
        }
    }
}

